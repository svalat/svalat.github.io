 
@inproceedings{arcangeli:ols09,
    abstract = {{With virtualization usage growing, the amount of RAM duplication in the same host across different virtual machines possibly running the same software or handling the same data is growing at a fast pace too. KSM is a Linux Kernel module that allows to share equal anony- mous memory across different processes and in turn also across different KVM virtual machines. Thanks to the KVM design and the mmu notifier feature, the KVM virtual machines aren't any different from any other pro- cess from the Linux Virtual Memory subsystem POV. And incidentally all Guest physical memory is allocated as regular Linux anonymous memory mappings. But KSM isn't just for virtual machines.
The KSM main task is to find equal pages in the system. To do that it uses two trees, one is the stable tree the other is the unstable tree. The stable tree contains only already shared and not changing KSM generated pages. The unstable tree contains only pages that aren't shared yet but that are tracked by KSM.
The content of the pages inserted into the two trees is the index of the tree, but we don't want to write-protect all the pagetables that points to the pages in the unstable tree. So we allow the content of the pages (so the tree index) to change under KSM and without knowledge of the tree balancing code. Thanks to the property of the red black trees that can keep a tree balanced without checking the node index value, even if the tree becomes unusable, the tree still remains balanced and the worst case insertion/deletion remains O(log(N)), to guarantee the ksm-tree algorithm not to degenerate in corner cases.
To reduce the number of false negative from the unsta- ble tree lookups, a checksum is used to insert into the unstable tree only pages whose checksum didn't change recently, but in the future the checksum can be replaced by checking the dirty bit of the pagetables and shadow pagetables (not with current EPT though). After a full
scan of all pages tracked by KSM, the unstable tree is rebuilt from scratch to reset all lookup errors introduced by the pages changing content during the scan.
Whenever KSM finds a match in the stable or unstable tree, it proceeds to write-protecting the pagetables that mapped to the old not shared anonymous page, and it makes them map the new shared KSM page as read-only. If any KVM shadow pagetable was mapping the page, it is updated and write-protected through the mmu notifier mechanism with a newly introduced change\_pte method.}},
    author = {Arcangeli, Andrea and Eidus, Izik and Wright, Chris},
    booktitle = {Proceedings of the Linux Symposium},
    citeulike-article-id = {8063239},
    citeulike-linkout-0 = {http://www.kernel.org/doc/ols/2009/ols2009-pages-19-28.pdf},
    day = {13-17},
    keywords = {article, kvm, useful},
    location = {Ottawa, Ontario, Canada},
    month = jul,
    pages = {19--28},
    posted-at = {2010-10-21 14:47:47},
    priority = {2},
    title = {{Increasing memory density by using KSM}},
    url = {http://www.kernel.org/doc/ols/2009/ols2009-pages-19-28.pdf},
    year = {2009}
}

@book{ModernOperSys3rd,
    abstract = {{<P style="MARGIN: 0px"> </P>  <P style="MARGIN: 0px"> The widely anticipated revision of this worldwide best-seller incorporates the latest developments in operating systems technologies.  The Third Edition includes up-to-date materials on relevant operating systems such as Linux, Windows, and embedded real-time and multimedia systems.  Includes new and updated coverage of multimedia operating systems, multiprocessors, virtual machines, and antivirus software. Covers internal workings of Windows Vista (Ch. 11); unique even for current publications. Provides information on current research based Tanenbaum's experiences as an operating systems researcher.  A useful reference for programmers.</P>} {For software development professionals and computer science students, <I>Modern Operating Systems</I> gives a solid conceptual overview of operating system design, including detailed case studies of Unix/Linux and Windows 2000.<p>   What makes an operating system modern? According to author Andrew Tanenbaum, it is the awareness of high-demand computer applications--primarily in the areas of multimedia, parallel and distributed computing, and security. The development of faster and more advanced hardware has driven progress in software, including enhancements to the operating system. It is one thing to run an old operating system on current hardware, and another to effectively leverage current hardware to best serve modern software applications. If you don't believe it, install Windows 3.0 on a modern PC and try surfing the Internet or burning a CD.<p>   Readers familiar with Tanenbaum's previous text, <I>Operating Systems</I>, know the author is a great proponent of simple design and hands-on experimentation. His earlier book came bundled with the source code for an operating system called Minux, a simple variant of Unix and the platform used by Linus Torvalds to develop Linux. Although this book does not come with any source code, he illustrates many of his points with code fragments (C, usually with Unix system calls).<p>   The first half of <I>Modern Operating Systems</I> focuses on traditional operating systems concepts: processes, deadlocks, memory management, I/O, and file systems. There is nothing groundbreaking in these early chapters, but all topics are well covered, each including sections on current research and a set of student problems. It is enlightening to read Tanenbaum's explanations of the design decisions made by past operating systems gurus, including his view that additional research on the problem of deadlocks is impractical except for "keeping otherwise unemployed graph theorists off the streets."<p>  It is the second half of the book that differentiates itself from older operating systems texts. Here, each chapter describes an element of what constitutes a modern operating system--awareness of multimedia applications, multiple processors, computer networks, and a high level of security. The chapter on multimedia functionality focuses on such features as handling massive files and providing video-on-demand. Included in the discussion on multiprocessor platforms are clustered computers and distributed computing. Finally, the importance of security is discussed--a lively enumeration of the scores of ways operating systems can be vulnerable to attack, from password security to computer viruses and Internet worms.<p>   Included at the end of the book are case studies of two popular operating systems: Unix/Linux and Windows 2000. There is a bias toward the Unix/Linux approach, not surprising given the author's experience and academic bent, but this bias does not detract from Tanenbaum's analysis. Both operating systems are dissected, describing how each implements processes, file systems, memory management, and other operating system fundamentals. <p>   Tanenbaum's mantra is simple, accessible operating system design. Given that modern operating systems have extensive features, he is forced to reconcile physical size with simplicity. Toward this end, he makes frequent references to the 
Frederick Brooks classic <I>The Mythical Man-Month</I> for wisdom on managing large, complex software development projects. He finds both Windows 2000 and Unix/Linux guilty of being too complicated--with a particular skewering of Windows 2000 and its "mammoth Win32 API." A primary culprit is the attempt to make operating systems more "user-friendly," which Tanenbaum views as an excuse for bloated code. The solution is to have smart people, the smallest possible team, and well-defined interactions between various operating systems components. Future operating system design will benefit if the advice in this book is taken to heart. <I>--Pete Ostenson</I> }},
    author = {Tanenbaum, Andrew S.},
    citeulike-article-id = {2737534},
    citeulike-linkout-0 = {http://www.amazon.ca/exec/obidos/redirect?tag=citeulike09-20\&amp;path=ASIN/0136006639},
    citeulike-linkout-1 = {http://www.amazon.de/exec/obidos/redirect?tag=citeulike01-21\&amp;path=ASIN/0136006639},
    citeulike-linkout-2 = {http://www.amazon.fr/exec/obidos/redirect?tag=citeulike06-21\&amp;path=ASIN/0136006639},
    citeulike-linkout-3 = {http://www.amazon.jp/exec/obidos/ASIN/0136006639},
    citeulike-linkout-4 = {http://www.amazon.co.uk/exec/obidos/ASIN/0136006639/citeulike00-21},
    citeulike-linkout-5 = {http://www.amazon.com/exec/obidos/redirect?tag=citeulike07-20\&path=ASIN/0136006639},
    citeulike-linkout-6 = {http://www.worldcat.org/isbn/0136006639},
    citeulike-linkout-7 = {http://books.google.com/books?vid=ISBN0136006639},
    citeulike-linkout-8 = {http://www.amazon.com/gp/search?keywords=0136006639\&index=books\&linkCode=qs},
    citeulike-linkout-9 = {http://www.librarything.com/isbn/0136006639},
    day = {21},
    howpublished = {Hardcover},
    isbn = {0136006639},
    month = dec,
    posted-at = {2008-07-08 20:05:13},
    priority = {2},
    publisher = {{Prentice Hall}},
    title = {{Modern Operating Systems (3rd Edition)}},
    url = {http://www.worldcat.org/isbn/0136006639},
    year = {2007}
}

@book{UnderstandTheLinuxKernel3rd,
    abstract = {{In order to thoroughly understand what makes Linux tick and why it works so
well on a wide variety of systems, you need to delve deep into the heart of
the kernel. The kernel handles all interactions between the CPU and the
external world, and determines which programs will share processor time, in
what order. It manages limited memory so well that hundreds of processes can
share the system efficiently, and expertly organizes data transfers so that
the CPU isn't kept waiting any longer than necessary for the relatively slow
disks.

The third edition of \_Understanding the Linux Kernel\_ takes you on a guided
tour of the most significant data structures, algorithms, and programming
tricks used in the kernel. Probing beyond superficial features, the authors
offer valuable insights to people who want to know how things really work
inside their machine. Important Intel-specific features are discussed.
Relevant segments of code are dissected line by line. But the book covers more
than just the functioning of the code; it explains the theoretical
underpinnings of why Linux does things the way it does.

This edition of the book covers Version 2.6, which has seen significant
changes to nearly every kernel subsystem, particularly in the areas of memory
management and block devices. The book focuses on the following topics:

  * Memory management, including file buffering, process swapping, and Direct
memory Access (DMA)

  * The Virtual Filesystem layer and the Second and Third Extended Filesystems

  * Process creation and scheduling

  * Signals, interrupts, and the essential interfaces to device drivers

  * Timing

  * Synchronization within the kernel

  * Interprocess Communication (IPC)

  * Program execution

\_Understanding the Linux Kernel\_ will acquaint you with all the inner workings
of Linux, but it's more than just an academic exercise. You'll learn what
conditions bring out Linux's best performance, and you'll see how it meets the
challenge of providing good system response during process scheduling, file
access, and memory management in a wide variety of environments. This book
will help you make the most of your Linux system.}},
    author = {Bovet, Daniel P. and Marco Cesati Ph},
    citeulike-article-id = {3092957},
    citeulike-linkout-0 = {http://www.amazon.ca/exec/obidos/redirect?tag=citeulike09-20\&amp;path=ASIN/0596005652},
    citeulike-linkout-1 = {http://www.amazon.de/exec/obidos/redirect?tag=citeulike01-21\&amp;path=ASIN/0596005652},
    citeulike-linkout-2 = {http://www.amazon.fr/exec/obidos/redirect?tag=citeulike06-21\&amp;path=ASIN/0596005652},
    citeulike-linkout-3 = {http://www.amazon.jp/exec/obidos/ASIN/0596005652},
    citeulike-linkout-4 = {http://www.amazon.co.uk/exec/obidos/ASIN/0596005652/citeulike00-21},
    citeulike-linkout-5 = {http://www.amazon.com/exec/obidos/redirect?tag=citeulike07-20\&path=ASIN/0596005652},
    citeulike-linkout-6 = {http://www.worldcat.org/isbn/0596005652},
    citeulike-linkout-7 = {http://books.google.com/books?vid=ISBN0596005652},
    citeulike-linkout-8 = {http://www.amazon.com/gp/search?keywords=0596005652\&index=books\&linkCode=qs},
    citeulike-linkout-9 = {http://www.librarything.com/isbn/0596005652},
    day = {17},
    edition = {3},
    howpublished = {Paperback},
    isbn = {0596005652},
    keywords = {kernel, linux},
    month = nov,
    posted-at = {2008-08-06 23:04:29},
    priority = {2},
    publisher = {O'Reilly Media},
    title = {{Understanding the Linux Kernel, Third Edition}},
    url = {http://www.worldcat.org/isbn/0596005652},
    year = {2005}
}

@misc{Drepper07whatevery,
    author = {Ulrich Drepper},
    title = {{What Every Programmer Should Know About Memory}},
    year = {2007}
}
